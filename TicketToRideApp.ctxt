#BlueJ class context
comment0.params=
comment0.target=void\ init()
comment0.text=\n\ Called\ by\ the\ browser\ or\ applet\ viewer\ to\ inform\ this\ JApplet\ that\ it\n\ has\ been\ loaded\ into\ the\ system.\ It\ is\ always\ called\ before\ the\ first\ \n\ time\ that\ the\ start\ method\ is\ called.\n
comment1.params=
comment1.target=void\ drawFirstFour()
comment1.text=\n\ Fills\ all\ players'\ hands\ with\n\ 4\ train\ cards\ at\ the\ beginning\ of\ game.\ \n
comment10.params=
comment10.target=void\ start()
comment10.text=\n\ Called\ by\ the\ browser\ or\ applet\ viewer\ to\ inform\ this\ JApplet\ that\ it\ \n\ should\ start\ its\ execution.\ It\ is\ called\ after\ the\ init\ method\ and\ \n\ each\ time\ the\ JApplet\ is\ revisited\ in\ a\ Web\ page.\ \n
comment11.params=
comment11.target=void\ stop()
comment11.text=\ \n\ Called\ by\ the\ browser\ or\ applet\ viewer\ to\ inform\ this\ JApplet\ that\n\ it\ should\ stop\ its\ execution.\ It\ is\ called\ when\ the\ Web\ page\ that\n\ contains\ this\ JApplet\ has\ been\ replaced\ by\ another\ page,\ and\ also\n\ just\ before\ the\ JApplet\ is\ to\ be\ destroyed.\ \n
comment12.params=xVal\ yVal
comment12.target=int\ trainClicked(int,\ int)
comment12.text=\n\ Checks\ to\ see\ which\ of\ the\ five\ draw\ cards\ was\ chosen\n\ \n\ @param\ xVal\ the\ x\ value\ of\ the\ clicked\ position\n\ @param\ yVal\ the\ y\ value\ of\ the\ clicked\ position\n\ @return\ 0-5\ depending\ on\ which\ card\ was\ chosen\ or\ -1\n\ if\ there\ wasn't\ a\ card\ clicked\n
comment13.params=r1
comment13.target=void\ capture(Route)
comment13.text=\n\ Captures\ a\ route\ \n\ \n\ @param\ r1\ the\ route\ that\ is\ to\ be\ captured\n
comment14.params=r1
comment14.target=void\ checkHand(Route)
comment14.text=\n\ This\ method\ checks\ all\ the\ possibilites\ that\ a\ \n\ player\ has\ for\ claiming\ a\ route\n\ depending\ on\ the\ cards\ in\ the\ players\ hand.\n\ It\ presents\ the\ player\ with\ every\ option\ possible\ \n\ depending\ on\ the\ route\ chosen.\n\ \n\ @param\ r1\ the\ route\ that\ is\ to\ be\ checked\n
comment15.params=e
comment15.target=void\ mouseClicked(java.awt.event.MouseEvent)
comment15.text=\n\ Mouse\ clicked\ method\ for\ the\ applet\n
comment16.params=
comment16.target=void\ endGame()
comment16.text=\n\ Method\ that\ handles\ the\ end\ game\ factors\n
comment17.params=
comment17.target=void\ declareLongestRoute()
comment17.text=\n\ Check\ longest\ routes\ for\ each\ player,\ if\ there\ is\ more\ \n\ than\ one\ player\ with\ the\ same\ length\ longest\ route\n\ add\ 10\ points\ to\ each\ player,\ or\ just\ add\ 10\ points\n\ to\ the\ single\ player\ with\ the\ longest\ route.\n
comment18.params=
comment18.target=void\ checkDestinationCards()
comment18.text=\n\ Checks\ to\ see\ if\ the\ player\ has\ completed\ their\n\ destination\ cards.\n
comment19.params=
comment19.target=void\ declareWinner()
comment19.text=\n\ Compares\ players\ destinations,\ scores,\ and\ mountains\n\ to\ determine\ a\ winner\ or\ declare\ a\ tie\ if\ there\ is\ no\ winner.\n
comment2.params=
comment2.target=void\ dealFirstDest()
comment2.text=\n\ Gives\ players\ the\ initial\ destination\ tickets\n\ to\ pick\ from\ at\ the\ start\ of\ the\ game\n
comment20.params=g
comment20.target=void\ paint(java.awt.Graphics)
comment20.text=\n\ Paint\ method\ for\ applet.\n\ \n\ @param\ \ g\ \ \ the\ Graphics\ object\ for\ this\ applet\n
comment21.params=
comment21.target=void\ destroy()
comment21.text=\n\ Called\ by\ the\ browser\ or\ applet\ viewer\ to\ inform\ this\ JApplet\ that\ it\n\ is\ being\ reclaimed\ and\ that\ it\ should\ destroy\ any\ resources\ that\ it\n\ has\ allocated.\ The\ stop\ method\ will\ always\ be\ called\ before\ destroy.\ \n
comment22.params=
comment22.target=java.lang.String\ getAppletInfo()
comment22.text=\n\ Returns\ information\ about\ this\ applet.\ \n\ An\ applet\ should\ override\ this\ method\ to\ return\ a\ String\ containing\ \n\ information\ about\ the\ author,\ version,\ and\ copyright\ of\ the\ JApplet.\n\n\ @return\ a\ String\ representation\ of\ information\ about\ this\ JApplet\n
comment23.params=
comment23.target=java.lang.String[][]\ getParameterInfo()
comment23.text=\n\ Returns\ parameter\ information\ about\ this\ JApplet.\ \n\ Returns\ information\ about\ the\ parameters\ than\ are\ understood\ by\ this\ \n\ JApplet.\n\ An\ applet\ should\ override\ this\ method\ to\ return\ an\ array\ of\ Strings\ \n\ describing\ these\ parameters.\ \n\ Each\ element\ of\ the\ array\ should\ be\ a\ set\ of\ three\ Strings\ containing\ \n\ the\ name,\ the\ type,\ and\ a\ description.\n\n\ @return\ a\ String[]\ representation\ of\ parameter\ information\ about\ this\ \n\ JApplet\n
comment24.params=e
comment24.target=void\ mouseEntered(java.awt.event.MouseEvent)
comment25.params=e
comment25.target=void\ mouseExited(java.awt.event.MouseEvent)
comment26.params=e
comment26.target=void\ mouseReleased(java.awt.event.MouseEvent)
comment27.params=e
comment27.target=void\ mousePressed(java.awt.event.MouseEvent)
comment3.params=
comment3.target=void\ dealThreeDests()
comment3.text=\n\ Gives\ the\ user\ three\ destination\ cards\ \n\ to\ choose\ from.\ The\ user\ must\ select\ at\n\ least\ one.\ All\ unselected\ cards\ are\ put\n\ on\ bottom\ of\ destination\ deck.\n
comment4.params=
comment4.target=void\ replaceTopFive()
comment4.text=\n\ Replaces\ the\ top\ 5\ cards\ for\n\ selection.\n
comment5.params=
comment5.target=void\ discardToMain()
comment5.text=\n\ Shuffles\ the\ discard\ pile\ back\ into\ the\ main\ \n\ deck,\ as\ long\ as\ there\ are\ cards\ in\ \n\ the\ discard\ pile.\n
comment6.params=
comment6.target=boolean\ checkTopFive()
comment6.text=\n\ Checks\ the\ top\ five\ cards\ to\ make\ sure\ there\ is\n\ not\ more\ than\ three\ Locomotive\ cards.\n\ \n\ @return\ true\ if\ there\ are\ more\ than\ three\ and\ \n\ false\ otherwise.\n
comment7.params=
comment7.target=void\ nameInput()
comment7.text=\n\ Prompts\ the\ user\ to\ input\ the\ number\ of\n\ players\ to\ play\ the\ game\ (2\ or\ 3),\ then\n\ allows\ the\ player\ to\ enter\ their\ \n\ distinct\ names.\n
comment8.params=begin\ end
comment8.target=int\ checkRoute(City,\ City)
comment8.text=\n\ Checks\ the\ route\ to\ see\ if\ it's\ a\ double\ route\ or\n\ single\ route\n\ \n\ @param\ begin\ the\ first\ city\n\ @param\ end\ the\ second\ city\n\ @return\ 2\ if\ its\ a\ double,\ 1\ if\ its\ a\ single\ and\ 0\ if\n\ there\ isn't\ a\ route\n
comment9.params=
comment9.target=void\ nextTurn()
comment9.text=\n\ Changes\ the\ turn\ accordingly.\n
numComments=28
